// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowAssistExamples.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SpecFlowAssist")]
    public partial class SpecFlowAssistFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SpecFlowAssistExamples.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SpecFlowAssist", "\tIn order to work with POCOs more effectively\r\n\tAs a SpecFlow student\r\n\tI want to" +
                    " learn how to wield the powers of SpecFlow.Assist", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Work with a single table entry")]
        public virtual void WorkWithASingleTableEntry()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work with a single table entry", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "ReleaseYear",
                        "LengthInMinutes",
                        "RecordLabel"});
            table1.AddRow(new string[] {
                        "Faithless",
                        "Sunday 8PM",
                        "1998",
                        "58",
                        "Cheeky Records/BMG"});
#line 7
 testRunner.Given("the following album exists", ((string)(null)), table1, "Given ");
#line 10
 testRunner.When("the album is rereleased", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "ReleaseYear",
                        "LengthInMinutes",
                        "RecordLabel"});
            table2.AddRow(new string[] {
                        "Faithless",
                        "Sunday 8PM",
                        "2019",
                        "58",
                        "Cheeky Records/BMG"});
#line 11
 testRunner.Then("the new album details should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Work with multiple table rows")]
        public virtual void WorkWithMultipleTableRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work with multiple table rows", null, ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "ReleaseYear",
                        "LengthInMinutes",
                        "Recordlabel"});
            table3.AddRow(new string[] {
                        "Faithless",
                        "Sunday 8PM",
                        "1998",
                        "58",
                        "Cheeky Records/BMG"});
            table3.AddRow(new string[] {
                        "London Grammar",
                        "If You Wait",
                        "2013",
                        "43",
                        "Metal & Dust"});
#line 16
 testRunner.Given("the following album collection exists", ((string)(null)), table3, "Given ");
#line 20
 testRunner.When("all albums in the collection are rereleased", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "ReleaseYear",
                        "LengthInMinutes",
                        "Recordlabel"});
            table4.AddRow(new string[] {
                        "London Grammar",
                        "If You Wait",
                        "2019",
                        "43",
                        "Metal & Dust"});
            table4.AddRow(new string[] {
                        "Faithless",
                        "Sunday 8PM",
                        "2019",
                        "58",
                        "Cheeky Records/BMG"});
#line 21
 testRunner.Then("the updated album collection should equal", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Allow for fuzzy matching and aliasing")]
        public virtual void AllowForFuzzyMatchingAndAliasing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Allow for fuzzy matching and aliasing", null, ((string[])(null)));
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "Release year",
                        "AlbumLength",
                        "Recordlabel"});
            table5.AddRow(new string[] {
                        "London Grammar",
                        "If You Wait",
                        "2013",
                        "43",
                        "Metal & Dust"});
#line 27
 testRunner.Given("the following album exists", ((string)(null)), table5, "Given ");
#line 30
 testRunner.When("the album is rereleased", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "Release year",
                        "AlbumLength",
                        "Recordlabel"});
            table6.AddRow(new string[] {
                        "London Grammar",
                        "If You Wait",
                        "2019",
                        "43",
                        "Metal & Dust"});
#line 31
 testRunner.Then("the new album details should be", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
